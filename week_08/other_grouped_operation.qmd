---
title: "Other grouped operations in Pandas"
author: "Elise Openi Gustav"
---

# 20  Other Grouped Operations in Pandas

```{python}
import pandas as pd
import vega_datasets as vd
import plotly.express as px
import warnings
import calendar
```

```{python}
weather_raw = vd.data.seattle_weather()

# Select just 2012 data using query and add a month column
weather = weather_raw.query("date.dt.year == 2012")
weather["month"] = pd.Categorical(
    weather["date"].dt.strftime("%B"),
    categories=list(calendar.month_name[1:]),
    ordered=True,
)
weather
```

```{python}
pd.options.display.max_rows = 20
```

## 20.5 Adding Summary Statistics Using transform()

```{python}
weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
```

```{python}
# Does not work
weather['mean_precip'] = weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
weather
```

```{python}
weather['mean_precip_month'] = weather.groupby('month')['precipitation'].transform('mean')
weather
```

```{python}
weather['prep_median_month'] = weather.groupby('month')['precipitation'].transform('median')    
weather
```

```{python}

# get the sum of precipitation for each month:

weather['precip_sum_month'] = weather.groupby('month')['precipitation'].transform('sum')
weather
```

```{python}

# calculate the proportion of that month’s precipitation that fell on each day

weather["precip_month_prop"] = weather["precipitation"] / weather["precip_sum_month"]
weather
```

## 20.6 Practice Q: Daily Tip Proportions

```{python}
# Your code here:
tips = px.data.tips()
tips
```

calculate: 1. A new column daily_total_tips containing the total tips for each day 

```{python}
tips['daily_total_tips'] = tips.groupby('day')['tip'].transform('sum')
tips
```

2. calculate a new column tip_proportion showing what proportion of that day’s total tips came from each customer

```{python}
tips["tips_prop"] = tips["tip"] / tips["daily_total_tips"]
tips
```

```{python}
weather = weather[['date', 'month', 'precipitation', 'wind', 'weather']]
weather
```

## 20.7 Counting Values Within Groups Using value_counts()

```{python}
# Count of weather types
weather["weather"].value_counts()
```

```{python}
# add normalize=True to get proportions:
weather['weather'].value_counts(normalize=True)
```

```{python}
# Counts of weather types per month
weather.groupby('month')['weather'].value_counts()
```

```{python}
weather.groupby('month')['weather'].value_counts().reset_index()
```
## 20.8 Practice Q: Count Smokers and Non-Smokers by Day

```{python}
tips = px.data.tips()
tips

tips.groupby('day')['smoker'].value_counts().reset_index()
```

## 20.9 Computing Cumulative Sums Within Groups

```{python}
# Cumulative sum of precipitation
weather["precip_cumul"] = weather["precipitation"].cumsum()
weather
```

```{python}
# Cumulative precipitation per month
weather["precip_cumul"] = weather.groupby("month")["precipitation"].cumsum()
weather
```

## 20.10 Practice Q: Cumulative Tip Amount by Day
Using the tips dataset, compute the cumulative sum of total_bill for each day, adding a new column cumul_total_bill_day. Then add another column cumul_tip_day that contains the cumulative sum of tip for each day.

```{python}
tips = px.data.tips()
tips = tips.sort_values("day")
tips

# cumulative sum of total_bill for each day
tips["cumul_total_bill_day"] = tips.groupby("day")["total_bill"].cumsum()


# cumulative sum of tip for each day.
tips["cumul_tip_day"] = tips.groupby("day")["tip"].cumsum()
tips
```
