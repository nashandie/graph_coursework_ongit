---
title: "Joining 2: One-to-Many, Multi-Key Joins & Key Mismatches"
author: "Elise Openi Gustav"
---

# 22  Joining 2: One-to-Many, Multi-Key Joins & Key Mismatches

## 22.1 Packages

```{python}
import pandas as pd
import country_converter as cc
```

## 22.2 Data

```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## 22.5 One-to-many joins

```{python}
people
```

```{python}
test_info_many
```

```{python}
pd.merge(people, test_info_many, on="name", how="left")
```

## 22.6 Practice Q: Merging One-to-Many Crop Yields

```{python}
farm_info
```

```{python}
crop_yields
```

```{python}
# use a merge() to join 'farm_info' and 'crop_yields' datasets

pd.merge(farm_info, crop_yields, on="farm_id", how="left")
```

## 22.7 Multiple Key Columns

```{python}
traffic_flow
```

```{python}
pollution_levels
```

```{python}
# match on street_name only

pd.merge(traffic_flow, pollution_levels, on="street_name", how="left")
```

```{python}
# match on BOTH street_name AND time_of_day
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day"])
```

## 22.8 Practice Q: Calculate Oil Consumption per Capita

```{python}
# View the datasets
oil_consumption.sort_values(by=["country", "year"])
```

```{python}
tidyr_population.sort_values(by=["country", "year"])
```

```{python}
# joining datasets by multiple columns
oil_consump_population = pd.merge(oil_consumption, tidyr_population, on=["country", "year"]).sort_values(by=["country","year"])
oil_consump_population
```

```{python}
# calculating consumption per capita by divinding "oil_consump" by "population"

oil_consump_population['consumption_per_capita'] = oil_consump_population ['oil_consump'] / oil_consump_population ['population']
oil_consump_population
```

```{python}
# filter out the 1995 consumption per capita

consumption_per_capita_1995 = oil_consump_population[
    oil_consump_population["year"] == 1995
]
consumption_per_capita_1995

# find the max value

max_value_1995 = consumption_per_capita_1995["consumption_per_capita"].max()
print(max_value_1995)

# and also find the row with this max value.

max_row = consumption_per_capita_1995.query("consumption_per_capita == @max_value_1995")
print(max_row)
```

**The country with the highest consumption per capita in 1995 is Singapore with 9.1884**

## 22.9 Key Mismatches

```{python}
people
```

```{python}
test_info_diff
```
```{python}
#  merge() on our two datasets

people.merge(test_info_diff, on='name', how='left')
```

```{python}
pd.merge(people, test_info_diff, on="name", how="inner")
```


```{python}
# ensure that the names in both datasets are in the same format, by using str.title() to capitalize the first letter of each name.

test_info_diff['name'] = test_info_diff['name'].str.title()
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

```{python}
test_info_diff["name"].unique()
```

```{python}
# using str.strip() to remove the extra space
test_info_diff['name'] = test_info_diff['name'].str.strip()
test_info_diff
```

```{python}
people.merge(test_info_diff, on='name', how='inner')
```

## 22.10 Practice Q: Inner Join Countries

```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

Capitalise country names:

```{python}
# Capitalise country names:

asia_population['Country'] = asia_population['Country'].str.title()
asia_population
```

```{python}
# correcting 'Philipines' spelling in the 'asia_population' dataset

asia_population['Country'] = asia_population['Country'].replace('Philipines', 'Philippines')

```

```{python}
# merging the two datasets

pd.merge(asia_countries, asia_population)
```

## 22.11 Key Mismatches: Oil Consumption Example

```{python}
oil_consumption
```

```{python}
tidyr_population
```

```{python}
pd.merge(
    oil_consumption, tidyr_population, on=["country", "year"], how="left"
).sort_values(["country", "year"])
```

**there are some countries that are not matched, such as Vietnam.**

```{python}
# identifying the unique country names in both datasets

oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())
```

```{python}
# finding countries in oil_consumption that are not in tidyr_population

missing_in_pop = oil_countries - pop_countries
missing_in_pop
```


```{python}
# countries in tidyr_population that are not in oil_consumption

missing_in_oil = pop_countries - oil_countries
missing_in_oil
```

## 22.12 Set Arithmetic

```{python}
set_1 = set([1, 2, 3, 4, 5])
set_2 = set([2, 3, 4])
```

```{python}
set_1 - set_2
```

```{python}
set_2 - set_1
```

### 22.12.1 Merging with Country Codes

```{python}
# How to use country_converter
cc.convert("Nigeria", to='ISO3')
```

```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')
tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')
```

```{python}
oil_pop_code = oil_consumption.merge(tidyr_population, on=['country_code', 'year'], how='left')
oil_pop_code
```

### 22.12.2 Identifying Remaining Mismatches

```{python}

# finding which countries still failed to find a match
set(oil_pop_code['country_code'].unique()) - set(tidyr_population['country_code'].unique())
```

**it seems ‘TWN’ (Taiwan) failed to find a match**

```{python}
# manually look through the tidyr_population dataset to see if we can find it.

tidyr_population.query("country.str.contains('Taiwan')")
```

```{python}
# Just in case there is a mismatch in capitalization, we can also check for ‘taiwan’

tidyr_population.query("country.str.contains('taiwan')")
```

```{python}
# check for ‘China’ since there is currently conflict over whether Taiwan is part of China.

tidyr_population.query("country.str.contains('China')")
```

**Taiwan information could be found from another source and added to the dataset.**

## 22.13 Practice Q: Merging Oil Consumption with Geographic Data

```{python}
oil_2012
```

```{python}
country_regions
```

```{python}
oil_2012['country_code'] = cc.convert(oil_2012['country'], to='ISO3')


oil_2012_regions = oil_2012.merge(country_regions, on='country_code', how='left')

max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby('continent')['oil_consump'].idxmax()
]

max_oil_by_continent[['country', 'continent', 'oil_consump']]
```
 

**This returns only five continents, Antarctica is not part of the output**

 Confirming continets in the dataset

 ```{python}
 country_regions["continent"].unique()
 ```

**This returns six(6) continents**


 ```{python}
 oil_2012.query("country.str.contains('Antarctica')")
 ```

```{python}
# finding which countries failed to find a match
set(oil_2012['country_code'].unique()) - set(country_regions['country_code'].unique())
```

```{python}
set(country_regions['country_code'].unique()) - set(oil_2012['country_code'].unique())
```

 **It seems that Antarctica is not part of 'oil_2012' dataset**