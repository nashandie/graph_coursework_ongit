---
title: "Reshaping data with melt() and pivot()"
author: "Elise Openi Gustav"
---

# 23  Reshaping Data with melt() and pivot()
## 23.1 Packages

```{python}
import pandas as pd
import plotly.express as px
```

## 23.2 Data

```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

Viewing this data on fossil fuel consumption per capita

```{python}
fuels_wide
```

'fuels_wide' is in a wide format. To convert it to a long format:

```{python}
fuels_long = fuels_wide.melt(id_vars=["Entity", "Code"])
fuels_long
```

Sorting fuels_long to make it easier to read:

```{python}
fuels_long = fuels_long.sort_values(by=['Entity', 'variable'])
fuels_long
```

Renaming the variable column to 'year', and the value column to 'oil_consumption'. This can be done directly in the melt function

```{python}
fuels_long = fuels_wide.melt(
    id_vars=['Entity', 'Code'],
    var_name='year',
    value_name='oil_consumption'
).sort_values(by=['Entity', 'year'])
fuels_long
```

Removing the 'y_' in front of each year. This can be achieved with a string operation.

```{python}
fuels_long['year'] = fuels_long['year'].str.replace('y_', '').astype(int)
fuels_long
```


## 23.9 Practice Q: Temperatures to Long
Convert the temperatures dataset shown below into a long format. Your answer should have the following column names: “country”, “year”, and “avg_temp”.

```{python}
temperatures_long = temperatures.melt(
    id_vars=['country'],
    var_name='year',
    value_name='avg_temp'
).sort_values(by=['country', 'year']).reset_index(drop=True)
temperatures_long
```

## 23.10 Practice Q: Eurostat Births to Long
use the euro_births_wide dataset from Eurostat. It shows the annual number of births in 50 European countries. The data is in a wide format. Convert it to a long format DataFrame that has the following column names: “country”, “year”, and “births_count”.

```{python}
euro_births_wide.head()
```

```{python}
euro_births_long = euro_births_wide.melt(
    id_vars=['country'],
    var_name='year',
    value_name='births_count'
).sort_values(by=['country', 'year']).reset_index(drop=True)
euro_births_long
```

Remove the x prefix from the year columns and convert them to integers:

```{python}
euro_births_long['year'] = euro_births_long['year'].str.replace('x', '').astype(int)
euro_births_long
```

## 23.11 Using Long Data for Analysis

```{python}
fuels_wide.head()
```

```{python}
fuels_long.head()
```

Finding the average fossil fuel consumption per country, this is very easy to do with the long format:

```{python}
fuels_long.groupby('Entity')['oil_consumption'].mean()
```

But with the wide format, this is not so easy:

```{python}
fuels_wide[['y_1970', 'y_1980', 'y_1990', 'y_2000', 'y_2010', 'y_2020']].mean(axis=1)
```

Long data is also very useful for plotting.

```{python}
subset = fuels_long.query('Entity in ["Peru", "Iran", "China"]')
px.line(subset, x='year', y='oil_consumption', color='Entity', title='Average Fossil Fuel Consumption per Country')
```

## 23.12 From Long to Wide

will use a dataset of contracts granted by the city of Chicago from 2020 to 2023.

```{python}
contracts
```

```{python}
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index()
contracts_summary
```

how to convert such 'contracts_summary' long data into a wide format with pivot().

```{python}
contracts_wide = contracts_summary.pivot(
    index="state", columns="year", values="count"
).reset_index()
contracts_wide.head()
```

Having the years as the primary observational units, with each year occupying one row. 

```{python}
contracts_wide_year = contracts_summary.pivot(
    index="year", columns="state", values="count"
).reset_index()
contracts_wide_year
```

## 23.13 Practice Q: Temperatures back to Wide
Convert the long temperatures_long dataset you created above back to a wide format. Your answer should have the following column names: “country”, “1994”, “1995”, and “1996”.

```{python}
temperatures_long
```

```{python}
temps_wide = temperatures_long.pivot(
    index="country", columns="year", values="avg_temp"
).reset_index()
temps_wide
```

## 23.14 Practice Q: Population to Wide
The population dataset shows the populations of 219 countries over time.

Reshape this data into a wide format.

```{python}
population
```

```{python}
population_wide = population.pivot(
    index="country", columns="year", values="population"
).reset_index()
population_wide
```
