---
title: Functions & Conditionals
author: Elise Openi Gustav
---
```{python}
# Import packages
import pandas as pd
import numpy as np
import vega_datasets as vd
```


```{python}
def pounds_to_kg(pounds):
    return pounds * 0.4536
```

```{python}
print(pounds_to_kg(150))
```


```{python}
def pounds_to_kg(pounds):
    kg = pounds * 0.4536
    return kg
```


```{python}
pounds_to_kg(pounds=150)
```

```{python}
pounds_to_kg(150)
```


```{python}
pounds_df = pd.DataFrame({'pounds': [150, 200, 250]})
pounds_df['kg'] = pounds_to_kg(pounds_df['pounds'])
pounds_df
```

```{python}
riots_df = vd.data.la_riots()
riots_df 
```

# 7.4.1 Age in Months Function
```{python}
def years_to_months(age):
    age_in_months = age * 12
    return age_in_months
```

```{python}

riots_df["age_months"] = years_to_months(riots_df['age'])
riots_df
```

# 7.5 Functions with Multiple Arguments

```{python}
def calc_calories(carb_grams, protein_grams, fat_grams):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result
```

```{python}
calc_calories(carb_grams=50, protein_grams=25, fat_grams=10)
```


```{python}
calc_calories(carb_grams=50, protein_grams=25)
```

## define default values

```{python}
def calc_calories(carb_grams=0, protein_grams=0, fat_grams=0):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result
```


```{python}
calc_calories(carb_grams=50, protein_grams=25)
```


```{python}
food_df = pd.DataFrame({
    'food': ['Apple', 'Avocado'],
    'carb_grams': [25, 10],
    'protein_grams': [0, 1],
    'fat_grams': [0, 14]
})
food_df['calories'] = calc_calories(food_df['carb_grams'], food_df['protein_grams'], food_df['fat_grams'])
food_df
```

## 7.5.1 BMI Function

```{python}
def calc_bmi(weight,height):
    bmi = weight/(height*height)
    return bmi
```

```{python}
bmi_df = pd.DataFrame({
    'Weight': [70, 80, 100],  # in kg
    'Height': [1.7, 1.8, 1.2]  # in meters
})
bmi_df['BMI'] = calc_bmi(bmi_df['Weight'], bmi_df['Height'])
bmi_df
```

# 7.6 Intro to Conditionals: if, elif, and else

```{python}
def class_num(num):
    if num > 0:
        return "Positive"
    elif num < 0:
        return "Negative"
    else:
        return "Zero"

print(class_num(10))    # Output: Positive
print(class_num(-5))    # Output: Negative
print(class_num(0))     # Output: Zero
```

```{python}
num_df = pd.DataFrame({'num': [10, -5, 0]})
num_df
```

```{python}
num_df['category'] = class_num(num_df['num'])
```

```{python}
class_num_vec = np.vectorize(class_num)
num_df['category'] = class_num_vec(num_df['num'])
num_df
```

```{python}
def categorize_grade(grade):
    if grade >= 85 and grade <= 100:
        return 'Excellent'
    elif grade >= 60 and grade < 85:
        return 'Pass'
    elif grade >= 0 and grade < 60:
        return 'Fail'
    else:
        return 'Invalid grade'

categorize_grade(95)  # Output: Excellent
```

```{python}
categorize_grade = np.vectorize(categorize_grade)

grades_df = pd.DataFrame({'grade': [95, 82, 76, 65, 58, -5]})
grades_df['grade_cat'] = categorize_grade(grades_df['grade'])
grades_df
```
# 7.6.1 Age Categorization Function

```{python}
def categorize_life (age):
    if age >= 65:
        return 'Senior'
    elif age >= 18 and age <= 65:
        return 'Adult'
    elif age >= 0 and age < 18:
        return 'Minor'
    else:
        return 'Invalid'

# vectorising

categorize_life = np.vectorize(categorize_life)
```

```{python}
# Your code here

riots_df = vd.data.la_riots()
riots_df

riots_df['Age_Category'] = categorize_life (riots_df['age'])
riots_df
```

# 7.6.2 Apply vs Vectorize

```{python}
grades_df['grade_cat'] = grades_df['grade'].apply(categorize_grade)
grades_df
```


