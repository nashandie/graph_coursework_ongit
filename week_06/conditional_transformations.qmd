---
title: Conditional Transformations of Variables
author: Elise Openi Gustav
---

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
import plotly.express as px
```

# Introduction to replace()

```{python}
tips = px.data.tips()
tips['day'].unique()
```

```{python}
# create a dictionary that maps the abbreviated names to the full names
day_mapping = {
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
}
```

```{python}
tips['day_full'] = tips['day'].replace({
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
})
tips[['day', 'day_full']].head()
```

```{python}
tips['day_full'] = tips['day'].replace(day_mapping)
tips
```

# 18.5 Practice Q: Abbreviate Sex

```{python}
tips['sex_abbr'] = tips['sex'].replace({
    "Female": "F",
    "Male": "M",
    
})
tips[['sex', 'sex_abbr']].head()
```

# 18.6 Handling Missing Values with replace()


```{python}
movies = vd.data.movies()
movies['Creative_Type'].value_counts(dropna=False)
```

```{python}
movies['Creative_Type'] = movies['Creative_Type'].replace({
    None: "Unknown/Unclear", # ðŸ‘ˆ On this line, None is the key
})
```

```{python}
movies['Creative_Type'].value_counts(dropna=False)
```

```{python}
movies.query("US_DVD_Sales.isna()").shape # Check the number of missing values
```

```{python}
movies['US_DVD_Sales'].tail(10) # View the last 10 values. Some are missing.
```

```{python}
movies['US_DVD_Sales'] = movies['US_DVD_Sales'].replace({
    np.nan: 0 # ðŸ‘ˆ `NaN` is represented by `np.nan` in pandas
})
```

```{python}
movies['US_DVD_Sales'].tail(10) # verifying the replacement of 'NaN' with '0'.
```

# 18.7 Practice Q: Standardize MPAA Ratings
```{python}
movies['MPAA_Rating'].value_counts(dropna=False)
```

```{python}
movies['MPAA_Rating'] = movies['MPAA_Rating'].replace({
    None: "Unrated",
    "Not Rated": "Unrated",
    
})
movies['MPAA_Rating'].value_counts(dropna=False)
```

# 18.8 Categorizing Numeric Data with Custom Functions

```{python}
def categ_gross(gross):
    if gross < 10000000:
        return "Low"
    elif gross >= 10000000 and gross <= 50000000:
        return "Medium"
    elif gross > 50000000:
        return "High"
    else:
        return None 


categ_gross_vec = np.vectorize(categ_gross)
```

```{python}
movies['Gross_Category'] = categ_gross_vec(movies['US_Gross'])
movies['Gross_Category'].value_counts(dropna=False)
```

# 18.9 Complex Transformations with Custom Functions

```{python}
# Define the function to flag movies based on the conditions
def flag_movie(movie_type, us, worldwide):
    if movie_type == 'Super Hero' and us == worldwide:
        return 'US action movie'
    elif movie_type == 'Super Hero' and worldwide > us:
        return 'Global action movie'
    else:
        return None
```

```{python}
print(flag_movie(movie_type='Super Hero', us=100, worldwide=100))
print(flag_movie(movie_type='Super Hero', us=100, worldwide=200))
print(flag_movie(movie_type='Comedy', us=100, worldwide=100))
```

```{python}
flag_movie_vec = np.vectorize(flag_movie) # vectorise
```

```{python}
movies['Action_Flag'] = flag_movie_vec(movies['Creative_Type'], movies['US_Gross'], movies['Worldwide_Gross'])
movies
```

```{python}
movies['Action_Flag'].value_counts(dropna=False)
```

# 18.9.1 Practice: Flag Movies Based on Ratings

```{python}
# Define the function to flag movies based on the conditions
def movie_type(rotten_tomatoes, IMDB):
    if rotten_tomatoes > 70 and IMDB < 5:
        return 'Critic_friendly'
    elif rotten_tomatoes < 50 and IMDB > 7:
        return 'Commercial'
    else:
        return 'Other'
```

```{python}
movie_type_vec = np.vectorize(movie_type) # vectorise
```

```{python}
# applying the function to the two columns
movies['Movie_Type'] = movie_type_vec(movies['Rotten_Tomatoes_Rating'], movies['IMDB_Rating'])
movies
```

```{python}
# how many movies are Critic-friendly and Commercial
movies['Movie_Type'].value_counts(dropna=False)
```


# Showing the actual Critic_friendly and Commercial movies

```{python}
#  Movies with rating Critic_Friendly rating
critic_friendly_movies = movies.query('Movie_Type == "Critic_friendly"')
print(critic_friendly_movies)

```

```{python}
#  Movies with Commercial rating
commercial_movies = movies.query('Movie_Type == "Commercial"')
print(commercial_movies)
```

```{python}

#  Movies with Commercial or Friendly rating
friendlycrit_commercial_movies = movies.query('Movie_Type == "Commercial" | Movie_Type == "Critic_friendly"')
print(friendlycrit_commercial_movies)
```