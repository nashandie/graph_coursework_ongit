
# title: Querying rows
# author: Elise Openi Gustav

```{python}
import pandas as pd

yaounde = pd.read_csv("data/yaounde_data.csv")
# a smaller subset of variables
yao = yaounde[
    [
        "age",
        "sex",
        "weight_kg",
        "neighborhood",
        "occupation",
        "symptoms",
        "is_smoker",
        "is_pregnant",
        "igg_result",
        "igm_result",
    ]
]
yao.head()
```

# 16.4 Introducing query()

```{python}
yao.query('sex == "Male"')
```

 count the number of male respondents.

 ```{python}
 yao.query('sex == "Male"').shape[0]
 ```

 ```{python}
 yao.shape
 yao.shape[0] # rows
 yao.shape[1]  # columns
 ```

 create a subset of male respondents
 ```{python}
yao_male = yao.query('sex == "Male"')
yao_male
 ```

 # 16.4.1 Practice Q: Subset for Pregnant Respondents

```{python}
  yao_pregnant = yao.query('is_pregnant == "Yes"')
  yao_pregnant
```

```{python}
yao.query('sex == "Female"')  # keep rows where `sex` is female
```

```{python}
yao.query('sex != "Male"')  # keep rows where `sex` is not "Male"
```


```{python}
yao.query("age < 6")  # keep respondents under 6
```

```{python}
yao.query("age >= 70")  # keep respondents aged at least 70
```

```{python}
# keep respondents whose neighbourhood is "Tsinga" or "Messa"
yao.query('neighborhood.isin(["Tsinga", "Messa"])')
```

# 16.5.1 Practice Q: Subset for Children

```{python}
yao_children = yao.query("age < 18")  # keep respondents aged less than 18
yao_children
```


```{python}
yao.query("age < 18").shape[0]  # confirming number of rows
```

# 16.5.2 Practice Q: Subset for Tsinga and Messa
```{python}
yao_carriere_ekoudou = yao.query('neighborhood.isin(["Carriere", "Ekoudou"])')
yao_carriere_ekoudou
```

```{python}
yao_carriere_ekoudou.shape[0]
```

# 16.6 Accessing external variables in query()

```{python}
min_age = 25

# Query using external variables
yao.query('age >= @min_age')
```

# 16.6.1 Practice Q: Subset for Young Respondents

```{python}
max_age = 30
yao_young=yao.query('age <= @max_age')
yao_young
```


```{python}
# respondents who are either younger than 18 OR older than 65,

yao.query("age < 18 | age > 65")
```
```{python}
#all respondents who are pregnant or ex-smokers

yao.query('is_pregnant == "Yes" & is_smoker == "Ex-smoker"')
```

```{python}
# get the unique values in a column,
yao.is_smoker.value_counts()
```

# 16.7.1 Practice Q: Subset for IgG Positive Men


```{python}
yao_igg_positive_men = yao.query('sex == "Male" & igg_result == "Positive"')
yao_igg_positive_men
```

# 16.8 Negating conditions with the ~ operator

```{python}
# drop respondents who are students
yao.query('~ (occupation == "Student")')
```

```{python}
# drop children or lightweight (under 30kg) respondents 

yao.query("~ (age < 18 | weight_kg < 30)")
```
# Practice Q: Drop Smokers and drop those over 50

```{python}
yao_dropped = yao.query('~ (age > 50 | is_smoker == "Smoker")')
yao_dropped
```

# 16.9 NaN values

```{python}
#yao.query("is_pregnant == NaN")  # does not work
```


```{python}
# select rows with missing values:
yao.query("is_pregnant.isna()")
```


```{python}
# select rows that are not missing with notna()
yao.query("is_pregnant.notna()")
```

# 16.9.1 Practice Q: Keep Missing Smoking Status

```{python}
#respondents who had NA records for the report of their smoking status.

yao.query("is_smoker.isna()")

```

# 16.10 Querying Based on String Patterns

```{python}
yao.occupation.value_counts().to_dict()
```

```{python}
yao.query("occupation.str.contains('Student')")
```

```{python}
# find respondents who are not students 
yao.query("~occupation.str.contains('Student')")
```


```{python}
# find respondents who are students or farmers
yao.query("occupation.str.contains('Student|Farmer')")
```

# 16.10.4 Practice Q: Symptoms

```{python}
# respondents who reported “Cough” or “Fever” 

yao.query("symptoms.str.contains('Cough|Fever')")
```